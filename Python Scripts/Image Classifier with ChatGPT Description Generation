import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import tensorflow as tf
import numpy as np
import requests
from io import BytesIO
from bs4 import BeautifulSoup
import openai

# Load ImageNet class labels
def load_labels():
    response = requests.get("https://storage.googleapis.com/download.tensorflow.org/data/imagenet_class_index.json")
    labels = response.json()
    return {int(key): value[1] for key, value in labels.items()}

imagenet_labels = load_labels()

# Initialize OpenAI API
openai.api_key = 'ChatGPT Key Here'

# Function to generate description using ChatGPT API
def generate_description(label):
    userMessage = f"Describe what '{label}' is."
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
         messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": userMessage},
        ],
        max_tokens=150,  # Limit the maximum length of the generated description
        temperature=0.5,  # Adjust the creativity level (0.0 for deterministic, 1.0 for creative)
        n=1  # Generate one completion
    )
    # print(response.choices[0].message.content)
    return response.choices[0].message.content


# # Function to fetch Wikipedia description for a given label
# def fetch_description(label):
#     try:
#         # Perform a Wikipedia search for the label
#         response = requests.get(f"https://en.wikipedia.org/wiki/{label}")
#         soup = BeautifulSoup(response.content, 'html.parser')

#         # Find the main content div
#         content_div = soup.find('div', class_='mw-parser-output')

#         # Find all paragraphs within the content div
#         paragraphs = content_div.find_all('p')

#         # Concatenate text from multiple paragraphs
#         description = ""
#         for paragraph in paragraphs:
#             description += paragraph.text.strip() + " "  # Append paragraph text with space separation
        
#         # Limit the description to a certain length
#         max_description_length = 300
#         if len(description) > max_description_length:
#             description = description[:max_description_length] + "..."
        
#         return description.strip()  # Strip leading/trailing whitespace
#     except Exception as e:
#         print(f"Error fetching description: {e}")
#         return "Description not available."


# Function to classify the selected image
def classify_image():
    # Load the selected image
    image_path = selected_image_path.get()
    if image_path:
        image = Image.open(image_path)
        
        # Convert image to RGB format (if it has an alpha channel)
        image = image.convert('RGB')
        
        image = image.resize((224, 224))  # Resize the image to match the input size of the model
        image = np.array(image) / 255.0    # Normalize pixel values
        
        # Classify the image
        predictions = model.predict(np.expand_dims(image, axis=0))
        predicted_class_index = np.argmax(predictions)
        predicted_class_name = imagenet_labels[predicted_class_index]
        
        # Fetch description for the predicted label
        description = generate_description(predicted_class_name)
        
        # Update the result text box
        result_text.delete(1.0, tk.END)  # Clear previous content
        result_text.insert(tk.END, f"Predicted Class: {predicted_class_name}\nDescription: {description}")
    else:
        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, "Please select an image.")


# Function to open a file dialog and select an image
def select_image():
    file_path = filedialog.askopenfilename()
    selected_image_path.set(file_path)
    if file_path:
        # Display the selected image
        image = Image.open(file_path)
        image = image.resize((200, 200))  # Resize the image to fit the GUI
        photo = ImageTk.PhotoImage(image)
        image_label.config(image=photo)
        image_label.image = photo
    else:
        image_label.config(image="")

# Load the pre-trained model
model = tf.keras.applications.MobileNetV2(weights='imagenet')

# Create the Tkinter window
window = tk.Tk()
window.title("Image Classifier")

# Create select image button
select_image_button = tk.Button(window, text="Select Image", command=select_image)
select_image_button.pack()

# Create label to display selected image
selected_image_path = tk.StringVar()
selected_image_path.set("")
image_label = tk.Label(window)
image_label.pack()

# Create classify button
classify_button = tk.Button(window, text="Classify Image", command=classify_image)
classify_button.pack()

# Create text box to display result
result_text = tk.Text(window, height=10, width=50)
result_text.pack()

# Run the Tkinter event loop
window.mainloop()
